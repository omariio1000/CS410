1. Private access promotes encapsulation, information hiding, and controlling access. These lead to easily understandable, modifiable, and maintanable code. This makes sure that certain data members can't be modified directly, so everything has to be done through public member functions. This makes sure that the object cannot be modified in unintended ways due to a change in the code, however the code can still do new things with the already available public member functions. This also hides implementation details from the outside world, making it easier to change the internal implementation of the class itself without affecting other parts of the codebase, meaning that one could change a member function and it would change throughout the codebase wherever it is used.
2. When writing code for a client, code should be clear and readable for other develops, especially those who may have to maintain it in the future. The comments should be there to get rid of any confusion there may be, to mark incomplete implementations, or links to references. They should not comment unclear code, because that unclear code should have never been there to begin with. For personal exploratory understanding, comments could explain things that one wrote and doesn't understand, things that need to be changed, things that are temporarily there for testing, explanations of thinking, etc. This doesn't mean they shouldn't be clear and concise, however, it isn't as strict as when writing comments in code delivered to a client.
3. When writing comments for the maintaner for a certain codebase, it is important that one provides important technical details and explains the structure and organization of the code through the comments. This helps the maintainer navigate the codebase. It should also include any possible bugs, or error handling that isn't straightforward. A client should have basic comments on interacting with the code, or how they are supposed to interface with it. It should document any specific terminology or integration with other libraries or code. A personal experience I had was interning at a company that didn't have very good comments on their system, rather they had a few people who knew how everything worked and a few old videos on an older version of the codebase that tried to explain all the dependencies, but wasn't up to date. It was very difficult to figure out how to work on that system, and required that my team meet with many other employees in order to figure out how to change any of the code and interface with other parts of the system without causing damage. This isn't solveable with comments necessarily, rather through clearer code and better documentation, but strategic comments would have definitely helped the situation.