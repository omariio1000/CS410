The goal of this program is to view different AI algorithms working to achieve the same vgoal in vastly different ways. They all have the goal of keeping the snake alive and eating the most possible apples, however they do it in different ways. The snakes start in four different corners, and they each move in different ways. Agent A always moves to the right, Agent B always moves randomly, Agent C cycles through a fixed pattern, which is up, up, right, down, right. Finally, Agent D attempts to move to a nearby apple, if one is within 5 blocks, otherwise it moves randomly. 

One issue with the current codebase is that it is very difficult to maintain. For one, the comments don't describe much other than what one can clearly see is happening. The bigger issue, however, is that the code doesn't have any ways to easily create a new Agent, other than adding to the type of 'Player' and doing a lot of things across many different files. 

One way to fix this would be to make a base Agent class, and have different derived classes that have different functions. Those can be stored then in some sort of data structure holding mutluple base class Agents. This would work very well, as to create a new Agent one would make a derived class, and store it in the structure, and that structure could be iterated through to do things like scoring, instead of only having four set agents.